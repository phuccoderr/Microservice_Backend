version: "3"

services:
  # kong-database:
  #   image: postgres:13
  #   container_name: kong-database-container
  #   environment:
  #     POSTGRES_USER: kong
  #     POSTGRES_DB: kong
  #     POSTGRES_PASSWORD: kongpass
  #   restart: always
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - default

  # kong-migrations:
  #   image: kong/kong-gateway:3.7.1.2
  #   container_name: kong-migrations-container
  #   depends_on:
  #     - kong-database
  #   command: "kong migrations bootstrap"
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_HOST: kong-database
  #     KONG_PG_PASSWORD: kongpass
  #     KONG_PASSWORD: test
  #   networks:
  #     - default

  # kong:
  #   image: kong/kong-gateway:3.7.1.2
  #   container_name: kong-container
  #   depends_on:
  #     - kong-database
  #     - kong-migrations
  #   restart: always
  #   environment:
  #     KONT_DATABASE: postgres
  #     KONG_PG_HOST: kong-database
  #     KONG_PG_USER: kong
  #     KONG_PG_PASSWORD: kongpass
  #     KONG_PROXY_ACCESS_LOG: /dev/stdout
  #     KONG_ADMIN_ACCESS_LOG: /dev/stdout
  #     KONG_PROXY_ERROR_LOG: /dev/stderr
  #     KONG_ADMIN_ERROR_LOG: /dev/stderr
  #     KONG_ADMIN_LISTEN: 0.0.0.0:8001
  #     KONG_ADMIN_GUI_URL: http://localhost:8002
  #     KONG_LICENSE_DATA: "true"
  #   ports:
  #     - "8000:8000"
  #     - "8443:8443"
  #     - "8001:8001"
  #     - "8444:8444"
  #     - "8002:8002"
  #     - "8445:8445"
  #     - "8003:8003"
  #     - "8004:8004"
  #   volumes:
  #     - ./db-data/kong-vol/:/usr/local/kong
  #   networks:
  #     - default

  postgresql:
    image: postgres:14.2
    container_name: postgres-container
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: users
      POSTGRES_PASSWORD: password
    restart: always
    ports:
      - "5433:5432"
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/
    networks:
      - default

  mongo:
    container_name: mongo-container
    image: mongo:7.0
    ports:
      - "27020:27017"
    volumes:
      - ./db-data/mongo/:/data/db
    networks:
      - default

  redis:
    container_name: redis-container
    image: redis:7.4.0-alpine
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - ./db-data/redis/:/data
    networks:
      - default

  kafdrop:
    container_name: kafdrop-container
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - "kafka"
  kafka:
    container_name: kafka-container
    image: obsidiandynamics/kafka
    restart: "no"
    ports:
      - "2181:2181"
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"

  mailhog:
    container_name: mailhog-container
    image: "mailhog/mailhog:latest"
    ports:
      - "1025:1025"
      - "8025:8025"

  user-service:
    container_name: user-service-container
    build:
      context: ./user-service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - mongo
      - redis
      - postgresql
      - kafka
    env_file:
      - ./user-service/.env
    ports:
      - "9120:9120"
    networks:
      - default

  customer-service:
    container_name: customer-service-container
    build:
      context: ./customer-service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - mongo
      - redis
      - postgresql
      - kafka
    env_file:
      - ./customer-service/.env
    ports:
      - "9150:9150"
    networks:
      - default

  category-service:
    container_name: category-service-container
    build:
      context: ./category-service
      dockerfile: Dockerfile
    depends_on:
      - mongo
      - redis
      - postgresql
      - kafka
    environment:
      POSTGRES_HOST: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_DB: users
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "9130:9130"
    networks:
      - default

  product-service:
    container_name: product-service-container
    build:
      context: ./product-service
      dockerfile: Dockerfile
    depends_on:
      - mongo
      - redis
      - postgresql
      - kafka
    environment:
      POSTGRES_HOST: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_DB: users
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:29092
    ports:
      - "9140:9140"
      - "7000:7000"
    networks:
      - default

  mail-service:
    container_name: mail-service-container
    build:
      context: ./mail-service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - mongo
      - redis
      - postgresql
      - kafka
    ports:
      - "9155:9155"
    networks:
      - default

  cart-service:
    container_name: cart-service-container
    build:
      context: ./cart-service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - redis
      - kafka
    ports:
      - "9160:9160"
    networks:
      - default

  order-service:
    container_name: order-service-container
    build:
      context: ./order-service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - redis
      - kafka
      - postgresql
    ports:
      - "9170:9170"
    networks:
      - default

  review-service:
    container_name: review-service-container
    build:
      context: ./review-service
      dockerfile: Dockerfile
    depends_on:
      - mongo
      - redis
      - postgresql
      - kafka
    environment:
      POSTGRES_HOST: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_DB: users
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:29092
    ports:
      - "9180:9180"
    networks:
      - default

  docs-swagger:
    container_name: docs-swagger-container
    build:
      context: ./docs-swagger
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    networks:
      - default

  chat-service:
    container_name: chat-service-container
    build:
      context: ./chat-service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - mongo
      - redis
      - postgresql
      - kafka
    env_file:
      - ./chat-service/.env
    ports:
      - "9190:9190"
    networks:
      - default

networks:
  default:
    driver: bridge
