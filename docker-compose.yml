version: '3'

services:
#  kong-database:
#    image: postgres:13
#    container_name: kong-database-container
#    environment:
#      POSTGRES_USER: kong
#      POSTGRES_DB: kong
#      POSTGRES_PASSWORD: kong
#    restart: always
#    ports:
#      - "5432:5432"
    # networks:
    #   - default
#
#  kong-migrations:
#    image: kong:latest
#    container_name: kong-migrations-container
#    depends_on:
#      - kong-database
#    restart: always
#    command: "kong migrations finish"
#    environment:
#      KONG_DATABASE: postgres
#      KONG_PG_HOST: kong-database
#      KONG_PG_PASSWORD: kong
#  #   networks:
#  #     - default
#
#  kong:
#    image: kong:latest
#    container_name: kong-container
#    depends_on:
#      - kong-database
#    restart: always
#    environment:
#      KONT_DATABASE: postgres
#      KONG_PG_HOST: kong-database
#      KONG_PG_PASSWORD: kong
#      KONG_PROXY_ACCESS_LOG: /dev/stdout
#      KONG_ADMIN_ACCESS_LOG: /dev/stdout
#      KONG_PROXY_ERROR_LOG: /dev/stderr
#      KONG_ADMIN_ERROR_LOG: /dev/stderr
#      KONG_ADMIN_LISTEN: 0.0.0.0:8001
#      KONG_ADMIN_GUI_URL: http://localhost:8002
#      KONG_LICENSE_DATA:
#    ports:
#      - "8000:8000"
#      - "8443:8443"
#      - "8001:8001"
#      - "8444:8444"
#      - "8002:8002"
#      - "8445:8445"
#      - "8003:8003"
#      - "8004:8004"
    # networks:
    #   - default

  postgresql:
    image: postgres:14.2
    container_name: postgres-container
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: users
      POSTGRES_PASSWORD: password
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/
    networks:
      - default

  mongo:
    container_name: mongo-container
    image: mongo:7.0
    ports:
      - "27020:27017"
    volumes:
      - ./db-data/mongo/:/data/db
    networks:
      - default
      
  redis:
    container_name: redis-container
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    volumes:
      - ./db-data/redis/:/data
    networks:
      - default

  kafdrop:
    container_name: kafdrop-container
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - "kafka"
  kafka:
    container_name: kafka-container
    image: obsidiandynamics/kafka
    restart: "no"
    ports:
      - "2181:2181"
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"

  mailhog:
    container_name: mailhog-container
    image: 'mailhog/mailhog:latest'
    ports:
      - "1025:1025"
      - "8025:8025"


  user-service:
    container_name: user-service-container
    build:
      context: ./user-service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - mongo
      - redis
      - postgresql
      - kafka
    env_file:
      - ./user-service/.env
    ports:
      - "9120:9120"
    networks:
      - default

  customer-service:
    container_name: customer-service-container
    build:
      context: ./customer-service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - mongo
      - redis
      - postgresql
      - kafka
    env_file:
      - ./customer-service/.env
    ports:
      - "9150:9150"
    networks:
      - default

  category-service:
    container_name: category-service-container
    build:
      context: ./category-service
      dockerfile: Dockerfile
    depends_on:
      - mongo
      - redis
      - postgresql
      - kafka
    environment:
      POSTGRES_HOST: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_DB: users
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "9130:9130"
    networks:
      - default

  product-service:
    container_name: product-service-container
    build:
      context: ./product-service
      dockerfile: Dockerfile
    depends_on:
      - mongo
      - redis
      - postgresql
      - kafka
    environment:
      POSTGRES_HOST: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_DB: users
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "9140:9140"
    networks:
      - default

  mail-service:
    container_name: mail-service-container
    build:
      context: ./mail-service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - mongo
      - redis
      - postgresql
      - kafka
    environment:
      MAIL_DOMAIN: mailhog
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      MAIL_ENCRYPITION: none
      KAFKA_BROKERS: kafka:29092
      KAFKA_TOPIC_VERIFY_ACCOUNT: customer-verify-events-topics
      KAFKA_TOPIC_VERIFY_PASSWORD: customer-password-events-topics


networks:
  default:
    driver: bridge
